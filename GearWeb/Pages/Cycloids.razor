@page "/cycloids"
@inject IJSRuntime JSRuntime
@inject StringCache Cache
@using GearWeb.Shared;

<h3>Generate Cycloidal Gear Vector Profiles</h3>
<EditForm Model=@GearData OnSubmit="@Generate">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col-md-3">
            <label for="Teeth">Number of teeth in left gear</label>
            <InputNumber @bind-Value="GearData.Teeth" class="form-control form-control-lg" ParsingErrorMessage="Must be an integer" id="Teeth" />
            <small class="form-text text-muted">The number of teeth on the left gear. Minimum value is 6.</small>
            <ValidationMessage For="() => GearData.Teeth" />
        </div>
        <div class="form-group col-md-3">
            <label for="OpposingTeeth">Number of teeth in right gear</label>
            <InputNumber @bind-Value="GearData.OpposingTeeth" class="form-control form-control-lg" ParsingErrorMessage="Must be an integer" id="OpposingTeeth" />
            <small class="form-text text-muted">The number of teeth on the right gear. Minimum value is 6</small>
            <ValidationMessage For="() => GearData.OpposingTeeth" />
        </div>
        <div class="form-group col-md-3">
            <label for="ToothBlunting">Addendum blunting of left gear</label>
            <InputNumber @bind-Value="GearData.ToothBlunting" class="form-control form-control-lg" ParsingErrorMessage="Must be an integer, 0..100" id="ToothBlunting" />
            <small class="form-text text-muted">Percentage of width of raised tooth flattened at top of tooth on left gear</small>
            <ValidationMessage For="() => GearData.ToothBlunting" />
        </div>
        <div class="form-group col-md-3">
            <label for="OpposingToothBlunting">Addendum blunting of right gear</label>
            <InputNumber @bind-Value="GearData.OpposingToothBlunting" class="form-control form-control-lg" ParsingErrorMessage="Must be an integer, 0..100" id="OpposingToothBlunting" />
            <small class="form-text text-muted">Percentage of width of  tooth flattened at top of tooth on right gear</small>
            <ValidationMessage For="() => GearData.OpposingToothBlunting" />
        </div>
    </div>
    <div class="form-row">
        <div class="col-md-3">&nbsp;
            <!--<label for="SwapGears">Switch the two gears</label><br/>
            <button class="btn btn-primary" id="SwapGears" @onclick="SwapGears">Switch gears</button>
            <small class="form-text text-muted">Swap the details of the two gears to plot the opposing gear</small>-->
        </div>
        <div class="form-group col-md-3">
            <label for="Tolerance">Precision</label>
            <InputText @bind-Value="GearData.Tolerance" class="form-control form-control-lg" ParsingErrorMessage="Number, e.g. 0.05" id="Tolerance" />
            <small class="form-text text-muted">Precision of points in vector output to nearest 100th of a mm, e.g. 0.05</small>
            <ValidationMessage For="() => GearData.Tolerance" />
        </div>
        <div class="form-group col-md-3">
            <label for="Module">Module</label>
            <InputText @bind-Value="GearData.Module" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 6.35" id="Module" />
            <small class="form-text text-muted">Module for gear to nearest 100th of a mm. Diameter at pitch circle will be number of teeth times the module.</small>
            <ValidationMessage For="() => GearData.Module" />
        </div>
        <div class="form-group col-md-3">
            <label for="Backlash">Backlash</label>
            <InputText @bind-Value="GearData.Backlash" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 0.25" id="Backlash" />
            <small class="form-text text-muted">Backlash between gear teeth to nearest 100th of a mm. Set zero for a perfectly tight fitting gear.</small>
            <ValidationMessage For="() => GearData.Backlash" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label for="CutterDiameter">Cutter diameter</label>
            <InputText @bind-Value="GearData.CutterDiameter" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 6.35" id="CutterDiameter" />
            <small class="form-text text-muted">Diameter of end mill bit used to cut the gear to nearest 100th of a mm. Set zero for ideal gear shape.</small>
            <ValidationMessage For="() => GearData.CutterDiameter" />
        </div>
        <div class="form-group col-md-3">
            <label for="SpindleDiameter">Spindle diameter</label>
            <InputText @bind-Value="GearData.SpindleDiameter" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 16.05" id="SpindleDiameter" />
            <small class="form-text text-muted">Diameter of central bore through gear to nearest 100th of a mm. Set zero to omit.</small>
            <ValidationMessage For="() => GearData.SpindleDiameter" />
        </div>
        <div class="form-group col-md-3">
            <label for="InlayDiameter">Inlay diameter</label>
            <InputText @bind-Value="GearData.InlayDiameter" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 16.05" id="InlayDiameter" />
            <small class="form-text text-muted">Diameter to nearest 100th of a mm of central inlay for inserting a bearing. Set zero to omit.</small>
            <ValidationMessage For="() => GearData.InlayDiameter" />
        </div>
        <div class="form-group col-md-3">
            <label for="KeyWidth">Key width</label>
            <InputText @bind-Value="GearData.KeyFlatWidth" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 16.05" id="KeyWidth" />
            <small class="form-text text-muted">Distance across flats of hex key at gear centre to nearest 100th of a mm. Set zero to omit.</small>
            <ValidationMessage For="() => GearData.KeyFlatWidth" />
        </div>
    </div>
    <div class="form-row">
        <div class="col-md-6">&nbsp;</div>
        <div class="col-md-3">
            <label for="WhichGears">Choose which gear or gears to draw</label><br />
            <InputSelect class="form-select" @bind-Value="GearData.WhichGears" id="WhichGears">
                <option selected value="1">Left gear</option>
                <option selected value="2">Right gear</option>
                <option selected value="3">Both gears</option>
                <option selected value="0">Meshing</option>
            </InputSelect>
            <small class="form-text text-muted">
                Left or right options plot single gears.
                Both plots the two gears meshed. Meshing shows the meshing teeth close-up.
            </small>
        </div>
        <div class="col-md-1">
            <button type="submit" class="btn btn-primary">Draw</button>
        </div>
        <div class="col-md-2">
            @if (CanDownload)
            {
                <a class="btn btn-primary" target="_top" href="@SvgUrl">Download SVG</a>
            }
            else
            {
                <span>
                    Select 'Left gear' or 'Right gear' to be
                    able to download the corresponding SVG file
                </span>
            }
        </div>
    </div>
</EditForm>
@if(!string.IsNullOrWhiteSpace(Errors.Value))
{
    <div class="card m-md-4">
        <div class="card-body">
            <h5 class="card-title">Error generating gear</h5>
            <p class="card-text">@Errors</p>
        </div>
    </div>
}

@if (!IsDisabled)
{
    <div class="card m-md-4">
        <div class="card-body">
            <h5 class="card-title">Cycloidal spur gear</h5>
            <p class="card-text">@ImageDescription</p>
            @if (hasTwoGears)
            {
                <div>
                    <button class="btn btn-primary" @onclick="NextImage">Next</button>
                    <button class="btn btn-outline-primary" @onclick="PrevImage">Previous</button>
                </div>
            }
        </div>
        @InvImage
    </div>
}

@code {
    bool TwoGears() => GearData != null && (GearData.WhichGears == 0 || GearData.WhichGears == 3);
    bool hasTwoGears = false;
    bool IsDisabled = true;
    bool CanDownload = false;
    CycloidParams GearData = new ();
    GearProfiles gearProfile = null;
    MarkupString InvImage = new();
    MarkupString ImageDescription = new MarkupString(string.Empty);
    MarkupString Errors = new MarkupString(string.Empty);
    string SVG = string.Empty;
    string SvgUrl = "/";
    int imageIndex = 0;
    void NextImage() { InvImage = new(gearProfile.SvgPlot[(++imageIndex) & 0x3F]); }
    void PrevImage() { InvImage = new(gearProfile.SvgPlot[(--imageIndex) & 0x3F]); }
    
    void Generate(EditContext ctx)
    {
        IsDisabled = true;
        if (ctx.Validate())
        {
            try
            {
                imageIndex = 0;
                gearProfile = GearAPI.CalcCycloidImage(GearData);
                ImageDescription = Program.ToHtmlText(gearProfile.Description);
                Errors = Program.ToHtmlText(gearProfile.Errors);
                InvImage = new(gearProfile.SvgPlot[imageIndex]);
                SVG = gearProfile.SvgData;
                SvgUrl = "/api/download?id=" 
                    + Cache.Insert(gearProfile.ShortName + ".svg", SVG);
                IsDisabled = false;
                hasTwoGears = TwoGears();
                CanDownload = GearData.WhichGears < 3 && GearData.WhichGears > 0;
            }
            catch (Exception x)
            {
                Errors = Program.ToHtmlText
                    ($"Gear generator threw an exception.\r\nReason: {x.Message}\r\nStack: {x.StackTrace}");
                InvImage = new();
                SVG = string.Empty;
            }
        }
    }

    async Task SvgToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", SVG);
    }
}
