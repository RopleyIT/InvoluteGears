@page "/escapewheels"
@using GearWeb.Shared
@inject IJSRuntime JSRuntime
@inject StringCache Cache
 
<h3>Generate Escape Wheel Vector Profiles</h3>
<EditForm Model=@GearData OnSubmit="@Generate">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="Teeth">Number of teeth</label>
            <InputNumber @bind-Value="GearData.Teeth" class="form-control form-control-lg" ParsingErrorMessage="Must be an integer" id="Teeth" />
            <small class="form-text text-muted">The number of teeth on the gear. Minimum value is 6.</small>
            <ValidationMessage For="() => GearData.Teeth" />
        </div>
        <div class="form-group col-md-4">
            <label for="UndercutAngle">Undercut angle</label>
            <InputText @bind-Value="GearData.UndercutAngle" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 14.5" id="UndercutAngle" />
            <small class="form-text text-muted">Undercut angle for teeth to nearest 10th of a degree. Common values are 5.0, 7.5 or 10</small>
            <ValidationMessage For="() => GearData.UndercutAngle" />
        </div>
        <div class="form-group col-md-4">
            <label for="Tolerance">Precision</label>
            <InputText @bind-Value="GearData.Tolerance" class="form-control form-control-lg" ParsingErrorMessage="Number, e.g. 0.05" id="Tolerance" />
            <small class="form-text text-muted">Precision of points in vector output to nearest 100th of a mm, e.g. 0.05</small>
            <ValidationMessage For="() => GearData.Tolerance" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="Module">Module</label>
            <InputText @bind-Value="GearData.Module" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 6.35" id="Module" />
            <small class="form-text text-muted">Module for gear to nearest 100th of a mm. Diameter at pitch circle will be number of teeth times the module.</small>
            <ValidationMessage For="() => GearData.Module" />
        </div>
        <div class="form-group col-md-4">
            <label for="FaceLength">Tooth face length</label>
            <InputText @bind-Value="GearData.FaceLength" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 0.25" id="FaceLength" />
            <small class="form-text text-muted">Length of each tooth's flat face to nearest 100th of a mm.</small>
            <ValidationMessage For="() => GearData.FaceLength" />
        </div>
        <div class="form-group col-md-4">
            <label for="TipPitch">Tooth tip length</label>
            <InputText @bind-Value="GearData.TipPitch" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 0.25" id="TipPitch" />
            <small class="form-text text-muted">Length of each tooth's narrow tip to nearest 100th of a mm.</small>
            <ValidationMessage For="() => GearData.TipPitch" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label for="BaseDiameter">Tooth base diameter</label>
            <InputText @bind-Value="GearData.BaseDiameter" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 6.35" id="BaseDiameter" />
            <small class="form-text text-muted">Diameter of curve at base of each tooth to nearest 100th of a mm.</small>
            <ValidationMessage For="() => GearData.BaseDiameter" />
        </div>
        <div class="form-group col-md-3">
            <label for="SpindleDiameter">Spindle diameter</label>
            <InputText @bind-Value="GearData.SpindleDiameter" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 16.05" id="SpindleDiameter" />
            <small class="form-text text-muted">Diameter of central bore through gear to nearest 100th of a mm. Set zero to omit.</small>
            <ValidationMessage For="() => GearData.SpindleDiameter" />
        </div>
        <div class="form-group col-md-3">
            <label for="InlayDiameter">Inlay diameter</label>
            <InputText @bind-Value="GearData.InlayDiameter" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 16.05" id="InlayDiameter" />
            <small class="form-text text-muted">Diameter to nearest 100th of a mm of central inlay for inserting a bearing. Set zero to omit.</small>
            <ValidationMessage For="() => GearData.InlayDiameter" />
        </div>
        <div class="form-group col-md-3">
            <label for="KeyWidth">Key width</label>
            <InputText @bind-Value="GearData.KeyFlatWidth" class="form-control form-control-lg" ParsingErrorMessage="Positive number, e.g. 16.05" id="KeyWidth" />
            <small class="form-text text-muted">Distance across flats of hex key at gear centre to nearest 100th of a mm. Set zero to omit.</small>
            <ValidationMessage For="() => GearData.KeyFlatWidth" />
        </div>
    </div>
    <div class="form-row">
        <div class="col-md-3">
            <button type="submit" class="btn btn-primary">Generate</button>
        </div>
        <div class="col-md-9">
            <a class="btn btn-primary" disabled="@IsDisabled" target="_top" href="@SvgUrl">Download SVG</a>
        </div>
    </div>
</EditForm>
@if (!IsDisabled)
{
    <div class="card m-md-4">
        <div class="card-body">
            <h5 class="card-title">Escape wheel</h5>
            <p class="card-text">@ImageDescription</p>
        </div>
        <img src="@InvImage" class="card-img-bottom" alt="Image of gear will appear here" />
    </div>
}

@code {
    bool IsDisabled = true;
    EscapeWheelParams GearData = new EscapeWheelParams();
    string InvImage = string.Empty;
    MarkupString ImageDescription = new MarkupString(string.Empty);
    string SVG = string.Empty;
    string SvgUrl = "/";
    void Generate(EditContext ctx)
    {
        IsDisabled = true;
        if (ctx.Validate())
        {
            try
            {
                var gearProfile = GearAPI.CalcEscapeImage(GearData);
                ImageDescription = Program.ToHtmlText(gearProfile.Description);
                InvImage = "data:image/jpeg;base64," + gearProfile.JpegBase64;
                SVG = gearProfile.SvgData;
                SvgUrl = "/api/download?id="
                    + Cache.Insert(gearProfile.ShortName, SVG);
                IsDisabled = false;
            }
            catch (Exception x)
            {
                ImageDescription = Program.ToHtmlText("Status: " + x.Message);
                InvImage = "";
                SVG = string.Empty;
            }
        }
    }

    async Task SvgToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", SVG);
    }

}
